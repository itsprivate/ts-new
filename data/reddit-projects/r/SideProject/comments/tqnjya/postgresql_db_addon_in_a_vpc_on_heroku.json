{
  "author": "OldSneerJaw",
  "original_created_utc": 1648514114,
  "title": "PostgreSQL DB add-on in a VPC on Heroku",
  "created_utc": 1648522157,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I used Heroku extensively at my previous job where I became aware of what seemed to be a major drawback of database add-ons in Heroku&amp;#39;s marketplace: they all seem to allow connections directly from the public internet (or at least from anywhere on AWS&amp;#39;s network). That way is certainly convenient, since an app developer needs only to parse the DB connection URL from the corresponding config variable (i.e. environment variable) in application code to connect to the DB. But leaving DB servers exposed to the whole world seems a clear violation of security best practices.&lt;/p&gt;\n\n&lt;p&gt;Heroku has its own solution to this problem: Private Spaces. In a private space, your app&amp;#39;s dynos and certain qualifying add-ons are hosted together within a virtual private cloud (VPC) that is firewalled off from the rest of the internet. It comes with a couple important caveats, however: you have to have a Heroku Enterprise account (which is rather expensive and requires you to give up the option to use cheaper dyno types) and it only supports a handful of select add-ons (specifically Heroku&amp;#39;s first party add-ons right now) to be sequestered with the app in its VPC.&lt;/p&gt;\n\n&lt;p&gt;My new add-on service (Borealis Isolated Postgres: &lt;a href=\"https://www.borealis-data.com/\"&gt;https://www.borealis-data.com/&lt;/a&gt;) aims to provide an alternative that sits somewhere between the extreme simplicity and &lt;em&gt;relative&lt;/em&gt; inexpensiveness of DB add-ons available on the Common Runtime and the considerably more expensive Private Spaces while offering a similar level of security as Private Spaces. The add-on is in beta now at no cost: &lt;a href=\"https://elements.heroku.com/addons/borealis-pg\"&gt;https://elements.heroku.com/addons/borealis-pg&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;With my add-on, each DB server is in a PostgreSQL-compatible Amazon Aurora DB cluster isolated within its own VPC. All connections to a DB server are required to be forwarded through an SSH server that is dedicated to that VPC.&lt;/p&gt;\n\n&lt;p&gt;So how does an app connect? I wrote a Heroku buildpack to take care of that seamlessly (&lt;a href=\"https://github.com/OldSneerJaw/heroku-buildpack-borealis-pg-ssh\"&gt;https://github.com/OldSneerJaw/heroku-buildpack-borealis-pg-ssh&lt;/a&gt;). When associated with an app, the buildpack automatically identifies any config variables from my add-on and sets up a persistent SSH local port forwarding connection to the database server using autossh. The app can then connect to the database via any PostgreSQL-compatible client library using the add-on&amp;#39;s &lt;code&gt;DATABASE_URL&lt;/code&gt; config variable without having to be aware of the SSH connection. In other words, application code doesn&amp;#39;t have to change at all to support it. If an app works with the first-party Heroku Postgres add-on, it should work with my add-on, too.&lt;/p&gt;\n\n&lt;p&gt;Connecting from your local machine or a CI server to a database server is also straightforward. I wrote a Heroku CLI plugin (&lt;a href=\"https://www.npmjs.com/package/borealis-pg-cli\"&gt;https://www.npmjs.com/package/borealis-pg-cli&lt;/a&gt;) that includes a couple simple commands to either run DB scripts (e.g. DB migrations to be executed during CI/CD) or open a persistent tunnel locally (e.g. for ad hoc data administration). It also has a few commands for managing which PostgreSQL extensions/modules are installed, since the app user does not have privileges to do so in SQL.&lt;/p&gt;\n\n&lt;p&gt;During the beta all add-ons are provisioned in a multi-tenant environment to keep my costs down, but when released to general availability, each premium add-on will get its own fully isolated VPC that is only accessible via its private SSH server. I have not yet decided whether I will continue to provide a free, multi-tenant option after GA, though.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re already a Heroku user, you can provision the add-on directly (for free) here: &lt;a href=\"https://dashboard.heroku.com/provision-addon?addonServiceId=de00ba11-8b65-47cd-b099-9605703a6e30\"&gt;https://dashboard.heroku.com/provision-addon?addonServiceId=de00ba11-8b65-47cd-b099-9605703a6e30&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation is here: &lt;a href=\"https://devcenter.heroku.com/articles/borealis-pg#getting-started\"&gt;https://devcenter.heroku.com/articles/borealis-pg#getting-started&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "score": 5,
  "permalink": "/r/SideProject/comments/tqnjya/postgresql_db_addon_in_a_vpc_on_heroku/",
  "subreddit": "SideProject",
  "id": "tqnjya",
  "is_self": true,
  "media": null,
  "is_video": false,
  "sensitive": false,
  "the_new_excerpt": "I used Heroku extensively at my previous job where I became aware of what seemed\nto be a major drawback of database add-ons in Heroku's marketplace: they all\nseem to allow connections directly from the public internet (or at least from\nanywhere on AWS's network). That way is certainly convenient,â€¦"
}