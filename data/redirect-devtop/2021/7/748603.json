{
  "type_of": "article",
  "id": 748603,
  "title": "Write clean Object-Oriented code by replacing conditional with polymorphism",
  "description": "In this article, I will talk about a refactoring called replace conditional with polymorphism that we...",
  "readable_publish_date": "Jul 5",
  "slug": "write-clean-object-oriented-code-by-replacing-conditional-with-polymorphism-4ng2",
  "path": "/kactus/write-clean-object-oriented-code-by-replacing-conditional-with-polymorphism-4ng2",
  "url": "https://dev.to/kactus/write-clean-object-oriented-code-by-replacing-conditional-with-polymorphism-4ng2",
  "comments_count": 2,
  "public_reactions_count": 46,
  "collection_id": null,
  "published_timestamp": "2021-07-05T14:53:16Z",
  "positive_reactions_count": 46,
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--_h1UYiQz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerrfurulmnyacpmmvvc.jpg",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gEGHlbvU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerrfurulmnyacpmmvvc.jpg",
  "canonical_url": "https://kactus.tech/write-clean-object-oriented-code-by-replacing-conditionnal-with-polymorphism/",
  "created_at": "2021-07-07T16:14:55.126Z",
  "edited_at": null,
  "crossposted_at": null,
  "published_at": "2021-07-05T14:53:16Z",
  "last_comment_at": "2021-07-07T14:10:49Z",
  "reading_time_minutes": 5,
  "tag_list": [
    "oop",
    "ruby",
    "rails",
    "programming"
  ],
  "tags": [
    "oop",
    "ruby",
    "rails",
    "programming"
  ],
  "user": {
    "name": "Alexandre Ruban",
    "username": "alexandreruban",
    "twitter_username": "alexandre_ruban",
    "github_username": "alexandreruban",
    "website_url": "https://www.rubycube.dev",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--QOOKTg0k--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/440979/e7e54478-02ce-4aa6-8d33-1ee6d301fec6.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--j7dbDB49--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/440979/e7e54478-02ce-4aa6-8d33-1ee6d301fec6.jpeg"
  },
  "organization": {
    "name": "Kactus Engineering",
    "username": "kactus",
    "slug": "kactus",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ogNd7FRX--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4300/39014968-b5f7-4492-a3b6-0a13539965e4.png",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--rGQsmhWR--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4300/39014968-b5f7-4492-a3b6-0a13539965e4.png"
  },
  "original_created_at": "2021-07-05T14:25:52Z",
  "image": "https://res.cloudinary.com/practicaldev/image/fetch/s--_h1UYiQz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerrfurulmnyacpmmvvc.jpg",
  "author": "Alexandre Ruban",
  "author_url": "https://dev.to/alexandreruban",
  "localize": [
    {
      "locale": "ja",
      "description": "この記事では、ポリモーフィズムを用いたリファクタリング（replace conditional with polymorphism）についてご紹介します。",
      "title": "条件付きをポリモーフィズムに置き換えることで、きれいなオブジェクト指向コードを書くことができる。"
    },
    {
      "locale": "zh",
      "description": "在这篇文章中，我将谈论一种叫做用多态性替换条件的重构，我们可以用多态性代替条件。",
      "title": "通过用多态性取代条件性来编写干净的面向对象的代码"
    },
    {
      "locale": "zh-Hant",
      "description": "在這篇文章中，我將談論一種叫做用多態性替換條件的重構，我們可以用多態性代替條件。",
      "title": "通過用多態性取代條件性來編寫乾淨的面向對象的代碼"
    }
  ]
}