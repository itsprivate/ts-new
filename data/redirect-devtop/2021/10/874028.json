{
  "type_of": "article",
  "id": 874028,
  "title": "Best Practices to Avoid Memory Leaks",
  "description": "In the Previous Blog we understood the Memory management in Node.js, how Garbage Collector (GC) works...",
  "readable_publish_date": "Dec 2",
  "slug": "best-practices-to-avoid-memory-leaks-2ibo",
  "path": "/amoled27/best-practices-to-avoid-memory-leaks-2ibo",
  "url": "https://dev.to/amoled27/best-practices-to-avoid-memory-leaks-2ibo",
  "comments_count": 1,
  "public_reactions_count": 52,
  "collection_id": null,
  "published_timestamp": "2021-12-02T15:10:55Z",
  "positive_reactions_count": 52,
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--aezUKkLO--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmjvuquzye7c990l9hxk.png",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--HhPuIHNc--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmjvuquzye7c990l9hxk.png",
  "canonical_url": "https://dev.to/amoled27/best-practices-to-avoid-memory-leaks-2ibo",
  "created_at": "2021-12-03T18:49:49.629Z",
  "edited_at": "2021-12-02T15:12:26Z",
  "crossposted_at": null,
  "published_at": "2021-12-02T15:10:55Z",
  "last_comment_at": "2021-12-03T18:46:33Z",
  "reading_time_minutes": 3,
  "tag_list": [
    "node",
    "javascript",
    "programming",
    "webdev"
  ],
  "tags": [
    "node",
    "javascript",
    "programming",
    "webdev"
  ],
  "user": {
    "name": "Amod Shinde",
    "username": "amoled27",
    "twitter_username": null,
    "github_username": "amoled27",
    "website_url": null,
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ujHUyw7s--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/734293/90ef3b9a-c04d-4489-8fee-7dd6a07c064d.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--RzGILehb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/734293/90ef3b9a-c04d-4489-8fee-7dd6a07c064d.jpeg"
  },
  "original_created_at": "2021-10-24T03:25:05Z",
  "image": "https://res.cloudinary.com/practicaldev/image/fetch/s--aezUKkLO--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmjvuquzye7c990l9hxk.png",
  "author": "Amod Shinde",
  "author_url": "https://dev.to/amoled27",
  "localize": [
    {
      "locale": "ja",
      "description": "前回のブログでは、Node.jsのメモリ管理について理解し、ガーベジコレクタ（GC）がどのように動作するかを理解しました。",
      "title": "メモリリークを回避するためのベストプラクティス"
    },
    {
      "locale": "zh",
      "description": "在上一篇博客中，我们了解了Node.js的内存管理，以及垃圾收集器（GC）是如何工作的。",
      "title": "避免内存泄漏的最佳做法"
    },
    {
      "locale": "zh-Hant",
      "description": "在上一篇博客中，我們瞭解了Node.js的內存管理，以及垃圾收集器（GC）是如何工作的。",
      "title": "避免內存泄漏的最佳做法"
    }
  ]
}