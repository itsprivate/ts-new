{
  "author": "cascading_disruption",
  "the_new_excerpt": "Concept explained, video: https://www.youtube.com/watch?v=TkiltupoocM , 9 minute\nvideo about \"Babel Fees on Cardano\" by Prof. Aggelos Kiayias / Whiteboard\nPresentation\n\nSource: https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\n\n\"First, let us recall how native assets work in Cardano: Tokens can…",
  "original_created_utc": 1623401417,
  "localize": [
    {
      "locale": "ja",
      "the_new_excerpt": "コンセプトの説明、ビデオ： https://www.youtube.com/watch?v=TkiltupoocM , 9分\nAggelos Kiayias教授による「Babel Fees on Cardano」についてのビデオ / ホワイトボード\nプレゼンテーション\n\n出典: https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\n\n\"まず、カルダノでのネイティブアセットの仕組みを思い出してみましょう。トークンは...",
      "title": "Cardanoの未来の \"マイクドロップ \"の瞬間：カスタム通貨で取引手数料を支払えるようになることで、ERC-20発行者がCardanoエコシステムに引き寄せられる。"
    },
    {
      "locale": "zh",
      "the_new_excerpt": "概念解释, 视频: https://www.youtube.com/watch?v=TkiltupoocM , 9分钟\nAggelos Kiayias教授关于 \"Cardano的Babel费用 \"的视频/白板\n演示文稿\n\n来源：https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\n\n\"首先，让我们回顾一下原生资产在Cardano中是如何工作的。代币可以...",
      "title": "Cardano未来的 \"降话筒 \"时刻：能够用自定义货币支付交易费用将吸引ERC-20发行人加入Cardano生态系统"
    },
    {
      "locale": "zh-Hant",
      "the_new_excerpt": "概念解釋, 視頻: https://www.youtube.com/watch?v=TkiltupoocM , 9分鐘\nAggelos Kiayias教授關於 \"Cardano的Babel費用 \"的視頻/白板\n演示文稿\n\n來源：https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\n\n\"首先，讓我們回顧一下原生資產在Cardano中是如何工作的。代幣可以...",
      "title": "Cardano未來的 \"降話筒 \"時刻：能夠用自定義貨幣支付交易費用將吸引ERC-20發行人加入Cardano生態系統"
    }
  ],
  "title": "Cardano's future \"mic drop\" moment: being able to pay transaction fees in custom currencies will attract ERC-20 issuers to Cardano ecosystem",
  "created_utc": 1623451543,
  "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Concept explained, video: <a href=\"https://www.youtube.com/watch?v=TkiltupoocM\">https://www.youtube.com/watch?v=TkiltupoocM</a> , 9 minute video about &quot;Babel Fees on Cardano&quot; by  Prof. Aggelos Kiayias / Whiteboard Presentation</p>\n\n<p>Source: <a href=\"https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\">https://iohk.io/en/blog/posts/2021/02/25/babel-fees/</a></p>\n\n<p>&quot;First, let us recall how <strong>native assets</strong> work in Cardano: Tokens can be created according to a minting policy and they <strong>are treated natively in the ledger along with ada</strong>. <strong>Cardano&#39;s ledger adopts the  Extended UTXO (EUTXO) model</strong>, and issuing a valid transaction requires consuming one or more UTXOs. A <strong>UTXO  in Cardano may carry not just ada but in fact a token bundle that can  contain multiple different tokens,  both fungible and non-fungible</strong>. In this way <strong>it is possible to write  transactions that transfer multiple different tokens with a single  UTXO.</strong> </p>\n\n<p><strong>Transaction fees in the ledger are denominated in ada according to a function fixed as a ledger parameter</strong>. A powerful feature of Cardano&#39;s EUTXO model is that the <strong>fees</strong> required for a valid  transaction <strong>can  be predicted precisely prior to posting it. This is a  unique feature  that is not enjoyed by other ledger arrangements (such as  the  account-based model used in Ethereum)</strong>. Indeed, in this latter  case  the fees needed for a transaction may change during the time it  takes  for the transaction to settle, since other transactions may  affect the  ledger&#39;s state in between and influence the required cost  for processing  the transaction.&quot;</p>\n\n<p><strong>Exploring a new mechanism to help make  fees fair, stable, and more predictable over time: stablefees and the  decentralized reserve system -&gt;</strong> IOG blog: <a href=\"https://iohk.io/en/blog/posts/2021/06/10/stablefees-and-the-decentralized-reserve-system/\">https://iohk.io/en/blog/posts/2021/06/10/stablefees-and-the-decentralized-reserve-system/</a></p>\n\n<p>The  core idea behind Stablefees is to have a base price for  transactions  through pegging to a basket of commodities or currencies.  Stablefees  includes a native &quot;decentralized reserve&quot; contract that  issues and  manages a stablecoin pegged to the basket. A comparison in  the fiat  world might be the International Monetary Fund’s<a href=\"https://www.imf.org/en/About/Factsheets/Sheets/2016/08/01/14/51/Special-Drawing-Right-SDR\"> SDR</a>,   (established in 1969) and valued based on a basket of five   currencies—the U.S. dollar, the euro, the Chinese renminbi, the Japanese   yen, and the British pound sterling. The stablecoin --- let’s call it   &quot;Basket Equivalent Coin&quot; (BEC) --- is the currency used for paying   transaction fees (and all other real world pricing needs of the   platform, e.g., SPO costs).</p>\n\n<p>In  this system, ada will play a dual  role: Reserve asset of the  decentralized reserve, and reward currency  for staking. It will also be  the fall-back currency in extreme scenarios  where the reserve contract  is in a liquidity crunch.</p>\n\n<p>The  centerpiece of this mechanism is an on-chain oracle that  determines the  price of the basket in ada. SPOs can implement this  oracle in a  decentralized manner. The reserve can offer extra rewards to  all oracle  contributors from the fees collected during BEC/DEC ( decentralized  equity coins )  issuances.</p>\n\n<p>The Stablefees mechanism can be considered a natural extension of <a href=\"https://iohk.io/en/blog/posts/2021/02/25/babel-fees/\">Babel fees</a>   ---spot conversion of BECs into ada by the decentralized reserve. Both   mechanisms complement (and are compatible with) each other. Babel fees   can be deployed together with Stablefees with just one change: Using   BECs to cover Babel fee liabilities, instead of ada. This also means   that fees will always be payable in ada (via a Babel fee liability   convertible in ada on the spot).</p>\n\n<p>Our  team is currently researching the granular details of the  Stablefees  mechanism. Once this research is complete, Stablefees can be  integrated  into Cardano to offer fair and predictable transaction  pricing.  Moreover, the price oracle and the global BEC (and regional  variants,  if included) will undoubtedly find uses beyond paying  transaction fees,  expanding the capabilities of decentralized  applications in the  Cardano ecosystem.</p>\n\n<p>Source: <a href=\"https://arxiv.org/abs/2106.01161\">https://arxiv.org/abs/2106.01161</a></p>\n\n<p><strong>Custom  currencies, usually following the ERC-20 standard, are one of the most  popular smart contracts deployed on the Ethereum blockchain. These  currencies are however second class to the primary currency Ether.</strong>  Custom tokens are not natively traded and accounted for by the Ethereum  ledger; instead, part of the logic of an ERC-20 contract replicates  this transfer and accounting functionality. The second class nature of  custom tokens goes further,though: <strong>transaction  processing and smart contract execution fee scan only be paid in Ether —  even by users who have got custom tokens worth thousands of dollars in  their wallets.</strong></p>\n\n<p><strong><em>Cardano&#39;s approach:</em></strong></p>\n\n<ul>\n<li><strong>by  introducing native custom tokens it is possible to allow custom tokens  to reuse the transfer and accounting logic that is already part of the  underlying ledger.</strong> This is achieved without the need for a  global registry or similar global structure via the concept of token  bundles in combination with token policy scripts that control minting  and burning of custom tokens.</li>\n<li><p><strong>requirements for babel fees</strong> are summarized as follows:  </p>\n\n<ul>\n<li><strong>(1)  participants that create a babel fee transaction should be able to  create a normal transaction, which will be included in the ledger  exactly as is (i.e., no need for meta-transactions or specially crafted  smart contract infrastructure</strong>) and</li>\n<li>(2)  the protocol should be non-interactive in the sense that a single  message from the creator of a transaction to the participant paying the  fee in the primary currency should suffice. In other words, <strong>we  want transaction creation and submission to be structurally the same  for trans-actions with babel fees as for regular transactions</strong>.</li>\n</ul></li>\n<li><p>Our <strong>implementation of babel fees is based on</strong> a novel ledger mechanism, which we call <strong>limited liabilities. These are negative token amounts (debt if you like)</strong> of strictly limited lifetime. <strong>Due to the limited lifetime of liabilities, we prevent any form of inflation (of the primary currency and of custom tokens).</strong></p></li>\n<li><p><strong>Transactions  paid for with babel fees simply pay their fees with primary currency  obtained by way of a liability. This liability is combined with custom  tokens offered to any party that is willing to cover the liability in  exchange for receiving the custom tokens.</strong></p></li>\n<li><p><strong>modify the ledger rules in three ways:</strong>  </p>\n\n<ul>\n<li>(1) The original UTXOma rules are defining ledger validity by adding transactions to the ledger one by one. We extend this by <strong>including the ability to add transactions in batches; i.e.,multiple transactions at once</strong></li>\n<li>(2) We <strong>drop the unconditional per-transaction ban on negative values in transaction outputs</strong>  and replace it by the weaker requirement that there remain no negative  values at the fringe of a batch of transactions. In other words, <strong>liabilities are confined to occur inside a batch and are forced to be resolved internally in the batch where they are created.</strong></li>\n<li>(3)  We amend the rules about the use of policy scripts such that the script  of a token 𝑇 is guaranteed to be run in every transaction that  increases the supply of 𝑇</li>\n</ul></li>\n</ul>\n\n<p>The paper makes the following contributions:</p>\n\n<ul>\n<li>We introduce the <strong>concept  of limited liabilities as a combination of negative values in  multi-asset token bundles with batched transaction processing</strong> (Section 2)</li>\n<li>We introduce the concept of babel fees on the basis of limited liabilities as a means to <strong>pay transaction fees in tokens other than a ledger’s primary currency</strong> (Section 2)</li>\n<li>We present <strong>formal ledger rules for an UTXO multi-asset ledger with limited liabilities</strong> (Section 3)</li>\n<li>We present a <strong>concrete spot market scheme for block producers to match babel fees</strong> (Section 4)</li>\n<li>We  present a solution to the knapsack problem that block producers have to  solve to maximise their profit in the presence of babel fees (Section  5)</li>\n</ul>\n\n<p><strong>Token  bundles are, in essence, finite maps that map an asset ID to a quantity  — i.e., to how many tokens of that asset are present in the bundle in  question.</strong> The asset ID itself is a pair of a hash of the policy  script defining the asset’s monetary policy and a token name, but that  level of detail has no relevance to the discussion at hand.</p>\n\n<p><strong><em>Other applications of limited liabilities</em></strong></p>\n\n<p>While  our primary motivation for proposing liabilities limited by transaction  batches are babel fees, the mechanism of limited liabilities is more  broadly applicable:</p>\n\n<ul>\n<li><p><strong><em>Swaps</em></strong>  </p>\n\n<ul>\n<li>As  discussed, we use liabilities in babel fees to form transaction outputs  that represent atomic swaps — we call those swap outputs. We do this by  including a liability (negative token value) together with an asset  (positive token value). Whoever consumes such an output effectively  swaps the tokens described by the liability for those constituting the  asset</li>\n</ul></li>\n<li><p><strong><em>Service payments</em></strong>  </p>\n\n<ul>\n<li>Extending  the concept of swaps from ex-changing assets to exchanging assets for  information. In the Extended UTXO model, which facilitates complex smart  contracts on a UTXO ledger, transaction outputs also include a data  component. This can, for example, be used to communicate information  from an off-chain oracle. Liabilities included with such an output can  serve as payment for consuming such an output with the data.</li>\n</ul></li>\n<li><p><strong><em>Indivisibility</em></strong>  </p>\n\n<ul>\n<li>Transaction  batches are different to signed trans-action groups proposed for some  ledgers, such as, for example, Algorand. To create a signed transaction  group, all component transactions need to be known and the group signed  as a whole. If multiple component transactions are created by different  parties,these parties need to cooperate to create the group transaction.  The benefit of such a signed group is that it is indivisible. The  transaction batches that we propose are different.</li>\n</ul></li>\n</ul>\n\n<p>Cardano&#39;s <strong><em>&quot;Competition&quot; (Ethereum, Algorand and Stellar and XRP Ledger built-in DEX) comparison</em></strong></p>\n\n<p><strong>Ethereum</strong></p>\n\n<p>Ethereum supports fee payment in non-primary currencies via its <a href=\"https://docs.opengsn.org/\">Gas Station Network.</a> The gas station infrastructure consists of:</p>\n\n<ul>\n<li>a  network of nodes listening for meta-transactions (transaction-like  requests to cover transaction fees), which turn these requests into  complete transactions, with fees covered by the relay node, and</li>\n<li>an  interface that contracts must implement in order for the relay nodes to  use this contract’s funds to subsidize the transaction fees.</li>\n</ul>\n\n<p>This  infrastructure consists of many moving parts working together,  including smart contracts, relays, relay hubs, and communication on a  network separate from the main chain network. Only GSN-enabled contracts  can cover transaction fees. <strong>Cardano&#39;s  proposal does not require any changes to existing smart contracts, and  does not require meta-transactions to be disseminated on a separate  network, since they are already fully-formed and signed transactions. In  addition, unlike the GSN, there is no further action required from the  user after submitting a Babel-fee transaction. The design of the GSN  allows for the possibility that an incorrect transaction is submitted by  a relay node in response to a sender’s fee-coverage request.</strong>  The onus is on the sender to monitor the chain, and reques tpunitive  measures to be taken against an offending relay. There are other  verifications necessary to participate in GSN. <strong>Submitting  transactions with liabilities has no potential of unexpected  consequences (whether they are included in the ledger or not).</strong> <em>The  GSN requires participating fee-covering contracts to pre-pay for the  fee amounts they intend to cover. This approach involves additional  maintenance, monitoring, and communication. The contract may specify the  tokens it accepts in exchange for covering fees, but the extra step of  posting and updating the contracts on-chain is less flexible and has  more steps (including submitting potentially costly transactions) than  our strategy.</em> Recall that in our design, we propose to automate the  process of any user getting a transaction with an exchange offer,  accepting or rejecting the offer based on maximizing the value they are  getting by engaging in theoffer, then submitting the batch containing  the swap transactions to the chain. With Babel fees, a user may use a  higher-than-minimum fee or exchange bid to increase the chances of their  transaction to be accepted sooner. The exchange offers made via  GSN-enable smart contracts, as well as the fee amounts the contract is  willing to cover,are all fixed.</p>\n\n<p><strong>Algorand</strong></p>\n\n<p><strong>Algorand</strong>  in an account-based cryptocurrency which supports custom native tokens.  It provides users with a way to perform atomic transfers. An atomic  transfer requires combining unsigned transactions into a single group  transaction, which must then be signed by each of the participants of  each of the transactions included. This <strong>design  allows users to perform, in particular, atomic swaps, which might be  used to pay fees in non-primary currencies. As with our design, the  transactions get included into the ledger in batches.</strong> <em>Unlike  the mechanism we propose, however, incomplete transactions cannot be  sent off to be included in the ledger without any further involvement of  the transaction author.</em> This interactive protocol specification  ensures that batches cannot betaken apart and completed using other  transactions. This may be an advantage in certain cases over a batch  that is combined in a loose, easily decomposable way, but this behaviour  can also be implemented in the system we have presented. Moreover, an  interactive protocol for building group transaction requires additional  communication, which is, in this case, reliant on off-chain  communication.</p>\n\n<p><strong>Stellar built-in DEX (XRP Ledger DEX works in a similar way)</strong></p>\n\n<p>A  common blockchain solution to providing swap functionality (and  therefore, custom token fee payment) is a distributed exchange (DEX). <strong>The  Stellar system supports a native, ledger-implemented DEX. In the  Stellar DEX, offers posted by users are stored on the ledger.A  transaction may attempt an exchange of any asset for any other asset,  and will fail if this exchange is not offered.</strong> This approach  requires submitting transactions to manage a user’s on-chain offers, and  also requires all exchanges to be exact — which means no overpaying is  possible to get one’s bid selected. A transaction may attempt to  exchange assets that are not explicitly listed as offers in exchange for  each other on the DEX. The DEX, in this case, is searched for a  multi-step path to exchanging these assets via intermediate offers. This  is not easily doable using the approach we have presented. <strong>A  DEX of this nature is susceptible to front-running. In our case,block  issuers are given a permanent advantage in resolving liability  transactions over non-block-issuing users. Among them, however,exactly  one may issue the next block, including the liabilities they resolved.</strong></p>\n</div><!-- SC_ON -->",
  "score": 168,
  "preview": {
    "images": [
      {
        "source": {
          "url": "https://external-preview.redd.it/9ZxrEqiQDdqV9LGhpTnJrXERBQSDTejMhNK37OKkpvo.jpg?auto=webp&s=62c1131c3fd9e707d5c0425e2a0246601dd70fd4",
          "width": 480,
          "height": 360
        },
        "resolutions": [
          {
            "url": "https://external-preview.redd.it/9ZxrEqiQDdqV9LGhpTnJrXERBQSDTejMhNK37OKkpvo.jpg?width=108&crop=smart&auto=webp&s=f4afc54f91ebe89d9cea021cbccf962971a46dab",
            "width": 108,
            "height": 81
          },
          {
            "url": "https://external-preview.redd.it/9ZxrEqiQDdqV9LGhpTnJrXERBQSDTejMhNK37OKkpvo.jpg?width=216&crop=smart&auto=webp&s=ec920f30668659ec1c3ddce17dbcf09cd790d824",
            "width": 216,
            "height": 162
          },
          {
            "url": "https://external-preview.redd.it/9ZxrEqiQDdqV9LGhpTnJrXERBQSDTejMhNK37OKkpvo.jpg?width=320&crop=smart&auto=webp&s=573279b36abe0869cc7a57b3947d18d3be2efb95",
            "width": 320,
            "height": 240
          }
        ],
        "variants": {},
        "id": "k1NTh9vRKJnchbYBj3oCtFtcQHayem2pRDhhUME959o"
      }
    ],
    "enabled": false
  },
  "permalink": "/r/CryptoCurrency/comments/nxb9xw/cardanos_future_mic_drop_moment_being_able_to_pay/",
  "subreddit": "CryptoCurrency",
  "id": "nxb9xw",
  "is_self": true,
  "media": null,
  "is_video": false,
  "source_updated_at": 1624009737338
}