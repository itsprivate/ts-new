{
  "author": "Routine_Elk_7421",
  "original_created_utc": 1627677216,
  "title": "So you're in it for the tech? Let's talk tech. A simple POW blockchain explanation with code PART 1",
  "created_utc": 1627716876,
  "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>It always amazes me how many people say they are in it for the tech (yes I know it&#39;s a meme), but they can&#39;t begin to explain the first thing about how a blockchain works. If that&#39;s you, let&#39;s change that! I am going to try to really ELI5 the concepts but reinforce them with some simple python code. Disclaimer: I&#39;m not an expert and happy to have anyone correct me.</p>\n\n<p>For this example, we&#39;ll be talking about proof of work (POW). This is just part 1. I don&#39;t want to overwhelm you, but if there is interest, I will make new posts until we&#39;ve built out a full blockchain in python.</p>\n\n<p><strong>What is a blockchain?</strong></p>\n\n<p>It&#39;s nothing more than an immutable (not changeable) store of information (in blockchain, we call these blocks). What makes it special is that as there is new information to store, it gets saved on top of the existing data. Each new piece of information (block) stores a reference to the data below it. These references are in the form of hashes.</p>\n\n<p><strong>What is a hash?</strong></p>\n\n<p>The topic are hashes are really complex, but all you need to know about them is that they are a computer algorithm&#39;s that take data of an arbitrary size and converts it to a fixed size. If the input data is the same, the hash will be the same every time you generate it. If you only have the hash, you cannot reverse it to get back to the original data. You should also know that a tiny change to the input data, results in a completely different hash. It won&#39;t look similar at all.</p>\n\n<p><strong>Let&#39;s try it out:</strong></p>\n\n<p>This assumes you are using Python 3 and have a basic understanding of Python and the command line. If not, there are tons of resources online, but happy to try to answer any questions.</p>\n\n<p>in this example, we are going to use the standard programming string &quot;hello world&quot; as our input data for simplicity. But in a real blockchain the input data is most likely a group of many transactions.</p>\n\n<p>Open a terminal and enter the following. This opens a python interpreter in which you can run code.</p>\n\n<pre><code> python3\n</code></pre>\n\n<p>Now enter each line 1 by 1, pressing enter between each line.</p>\n\n<pre><code>import hashlib # imports the hashing library\ninput_data = &quot;hello world&quot;.encode(&#39;utf-8&#39;) # set some input data\nfirst_hash = hashlib.sha256(input_data).hexdigest() # saves the hash of our input data to a variable\nprint(first_hash) # prints out the hash\n</code></pre>\n\n<p>Notice that after the entering the last line you get this out:</p>\n\n<pre><code>b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n</code></pre>\n\n<p>Repeat the steps above and you&#39;ll see the hash doesn&#39;t change.</p>\n\n<p>Now let&#39;s make one tiny change to our input data (making the word world plural) and prove that the hash stays the same length but completely changes. In the same terminal enter the following lines:</p>\n\n<pre><code>input_data_updated = &quot;hello worlds&quot;.encode(&#39;utf-8&#39;) # create some new input data\nsecond_hash = hashlib.sha256(input_data_updated).hexdigest()\nprint(second_hash)\n</code></pre>\n\n<p>Notice this time you the following output:</p>\n\n<pre><code>8067f1ae16f20dea0b65bfcbd50d59014d143c8ecebab179d923f6ef244b40f8\n</code></pre>\n\n<p>You should know that we can just treat the hash like any other text and hash it again. We can even combine it with other text before we hash it. Let&#39;s try it out:</p>\n\n<pre><code>combined_hash = hashlib.sha256(str(first_hash).encode(&#39;utf-8&#39;) + str(second_hash).encode(&#39;utf-8&#39;)).hexdigest()\nprint(combined_hash)\n</code></pre>\n\n<p>Now you will get the following:</p>\n\n<pre><code>3ef229cf1df86a5a0a0fed22d95484585995bc9d851e4b46ac57b7287fa0f9ea\n</code></pre>\n\n<p><strong>How do hashes make a blockchain immutable?</strong></p>\n\n<p>Because we now know the properties of hashes, we know that changing the input data changes our hash. We also know the each block refers to the block below it by referencing it&#39;s hash. The way it does this is by combining its own input data with the hash of the previous block, just as we did in the above example. In POW, nodes run special software the keep track of the existing blocks and validate new ones. Just like we did in the above example, they can calculate the hash for themselves. If things don&#39;t check out they will reject the block.</p>\n\n<p>So imagine an attacker wants to change data in an older block so instead of saying you sent crypto to your friend, they try to rewrite history to say you sent crypto to them. But we know if they try to propose a block with this change, it will change the hash of the block they modified and thus will change the hash of every block after it.</p>\n\n<p>The only way they could work around this is by performing a 51% attack. in POW, nodes follow the longest chain of valid blocks. But because the attacker has gone and changed an older block all the blocks after that one are invalid because the hashes are wrong. They would need to regenerate all the blocks after the one they modified to make them valid. But doing so is expensive because meanwhile, all other miners are generating real blocks. This is where 51% attack comes in. If the attacker controlled &gt; 50% of the hashing power (computer&#39;s generating blocks), their modified chain will eventually become longer than the real one and nodes will begin treating that as the real chain.</p>\n\n<p>This scenario is difficult to do because gaining hashing power requires a lot of computer resources that are expensive. In the next part, we&#39;ll look at what these computers are doing that makes it a long and costly attack.</p>\n</div><!-- SC_ON -->",
  "score": 168,
  "permalink": "/r/CryptoCurrency/comments/outcav/so_youre_in_it_for_the_tech_lets_talk_tech_a/",
  "subreddit": "CryptoCurrency",
  "id": "outcav",
  "is_self": true,
  "media": null,
  "is_video": false,
  "the_new_excerpt": "It always amazes me how many people say they are in it for the tech (yes I know\nit's a meme), but they can't begin to explain the first thing about how a\nblockchain works. If that's you, let's change that! I am going to try to really\nELI5 the concepts but reinforce them with some simple python code.…",
  "localize": [
    {
      "locale": "ja",
      "the_new_excerpt": "技術のために参加していると言う人が多いのにはいつも驚かされます（はい、これはミームです）。\nているのですが、ブロックチェーンがどのように機能するのかを最初に説明することができない人が多いことに驚かされます。\nブロックチェーンがどのように機能するのかを説明できない人が多いことに驚かされます。もしあなたがそうなら、それを変えましょう。私はこれから、本当に\nELI5のコンセプトを、簡単なpythonコードで補強してみます....",
      "title": "技術のためにやっているのか？技術の話をしよう。POWブロックチェーンをコードでわかりやすく解説 PART1"
    },
    {
      "locale": "zh",
      "the_new_excerpt": "它总是让我吃惊，有多少人说他们是为了技术而来（是的，我知道\n这是一个备忘录），但他们不能开始解释关于区块链如何工作的第一件事。\n区块链如何运作。如果你是这样的人，让我们来改变这种状况吧 我将尝试真正\nELI5的概念，但用一些简单的python代码加强它们....",
      "title": "所以你是为了技术而来？让我们来谈谈技术。一个简单的POW区块链解释与代码第一部分"
    },
    {
      "locale": "zh-Hant",
      "the_new_excerpt": "它總是讓我喫驚，有多少人說他們是爲了技術而來（是的，我知道\n這是一個備忘錄），但他們不能開始解釋關於區塊鏈如何工作的第一件事。\n區塊鏈如何運作。如果你是這樣的人，讓我們來改變這種狀況吧 我將嘗試真正\nELI5的概念，但用一些簡單的python代碼加強它們....",
      "title": "所以你是爲了技術而來？讓我們來談談技術。一個簡單的POW區塊鏈解釋與代碼第一部分"
    }
  ]
}