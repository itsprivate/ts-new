{
  "author": "omgdontdie",
  "original_created_utc": 1625814934,
  "title": "Whackd is a malicious scamcoin and I can prove it.",
  "created_utc": 1625826643,
  "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>If you read nothing else, just know whackd is a scam coin.  So, for the love of god don&#39;t buy it, sell it, or give it any reason to have any value at all.  If you will give me a moment of your time, I&#39;ll show you why.</p>\n\n<p>I&#39;m currently an aspiring blockchain developer who wants to make defi products.  I decided to take a bit of a break from coding with solidity to go into one of the many telegram groups where people shill coins.  Normally I don&#39;t pay attention to these coins, but on a lark I decided to look at the code after someone mentioned its weird deflationary tokenomics.  I wanted to investigate so I went on etherscan to look at the contract code.</p>\n\n<p>While the first weird thing about the code is that they are using an outdated version of solidity (a popular language for writing smart contracts) to write and produce it.  It is kind of odd, but nothing to be alarmed at.  The rest of the code looks like a normal erc20 token would, but then you get to the meat and potatoes of the code, the transfer functions and you see something shady is going on.  Lets have a look:</p>\n\n<pre><code> function transfer(address to, uint tokens) public returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n    if (random &lt; 999){\n        random = random + 1;\n        uint shareburn = tokens/10;\n        uint shareuser = tokens - shareburn;\n        balances[to] = safeAdd(balances[to], shareuser);\n        balances[address(0)] = safeAdd(balances[address(0)],shareburn);\n        emit Transfer(msg.sender, to, shareuser); \n        emit Transfer(msg.sender,address(0),shareburn);\n    } else if (random &gt;= 999){\n        random = 0;\n        uint shareburn2 = tokens;\n        balances[address(0)] = safeAdd(balances[address(0)],shareburn2);\n</code></pre>\n\n<p>If you have no idea about coding, let me break it down for you.  Previously in the code there is a variable called random with a value of zero.  Every time a transfer is made,  the value of random is increased by 1 until the iteration of the 999th transfer, then random is reset to zero.  If you are between 0 and 999 as your random value for your transaction, a 10th of the amount you wish to transfer is  sent to the 0x0 address.  This is one method tokens are burned, because it is thought that by sending tokens to that address no one can access them because no one yet has the private keys to access that wallet (Spoiler alert, the tokens aren&#39;t actually burned, but we will discuss that a little later).  If your transfer is the lucky number 1000, then your whole entire transfer is &quot;burned&quot; and sent to the same 0x0 address.  You just get rug pulled for the sake of being rug pulled because you were unlucky number 1000.  </p>\n\n<p>While this is really stupid and incriminating on its own.  The token is upfront about it and everyone who shills it seems to use that as a point of pride.  Okay, Whatever morons.  But I took a closer look and realized this is more malicious than it looks.  </p>\n\n<p>Lets focus in on one line specifically, this is the &quot;burn&quot; feature that facilitates the whackd tokens being sent to the 0x0 wallet:</p>\n\n<pre><code>     balances[address(0)] = safeAdd(balances[address(0)],shareburn2);\n</code></pre>\n\n<p>Actually sorry, let me back up.  I need to explain something first.  To explain something complicated as simply as possible; with erc20 tokens you need to set up a list of all accounts that interact with the contract and on that list is the amount of the tokens in each address.  So what this code is doing is taking the amount that should be burned and giving it to an address that appears to be not usuable (but actually is- I will get to that later).  So all the brags about the token being deflationary are not true.  The total supply remains the same.  It doesn&#39;t add value to any of the users to have 10% of their transfer taken away and sent somewhere else in token appreciation.  It&#39;s all a lie meant to deceive people who may not know how tokenomics work.  </p>\n\n<p>It gets worse than that tho.  Let us get to the bottom of the contract which has the most diabolical code written.  </p>\n\n<p>But wait...  I know I&#39;m bad at this, but we gotta do one more precursor for this to make sense.  </p>\n\n<p>At the top of the contract is some odd code relating to assigning owner of the smart contract to be given special privileges.  Normally erc20 tokens do not need owners, and an owner really defeats the purpose of a decentralized currency.  So If there is an owner, that can only do certain things, lets try and find out what these special things are....</p>\n\n<p>Aside from transferring ownership of the contract, there really isn&#39;t anything that needs special owner access...That is until you get to the last function of the contract.  I will include the whole thing, comments and all:  </p>\n\n<pre><code>// Owner can transfer out any accidentally sent ERC20 tokens\n\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n</code></pre>\n\n<p>If you just listen to what the comment says, it seems like a kind gesture that if someone where to make a mistake, or if a scam happens, the contract owner can be contacted and will send back the tokens to the aggrieved party.  Makes total sense.  Except, the transfer goes directly to the owner&#39;s address, and the owner is allowed to go into ANY address and can take out any amount of tokens as they see fit.  There are no restrictions, no conditions, nothing.  The owner can go thru and enrich himself as he sees fit.  </p>\n\n<p>I know I don&#39;t need to go on, but remember about the 0x0 &quot;burn&quot; wallet?  that&#39;s something that the owner has access to as well.  The owner could just steal everyone&#39;s tokens, but that would make a huge splash.  Instead, what the owner can do is take the tokens everyone assumes are burned, send them over to himself which he can then cash out.  </p>\n\n<p>This was meant to be a scamcoin from the start.  It says one thing, that people without an understanding of smart contracts would take at face value, but its code shows that there is more going on.  </p>\n\n<p>PLEASE PLEASE PLEASE do your due dilligence.  If you are going to go full degen on crypto coins, know at least a little bit about the coding and how smart contracts work.  It will save you the trouble of getting scammed when its obvious in the code.  </p>\n\n<p>TL;DR Don&#39;t buy whackd, yo.</p>\n</div><!-- SC_ON -->",
  "score": 378,
  "permalink": "/r/CryptoCurrency/comments/ogqerq/whackd_is_a_malicious_scamcoin_and_i_can_prove_it/",
  "subreddit": "CryptoCurrency",
  "id": "ogqerq",
  "is_self": true,
  "media": null,
  "is_video": false,
  "the_new_excerpt": "If you read nothing else, just know whackd is a scam coin. So, for the love of\ngod don't buy it, sell it, or give it any reason to have any value at all. If\nyou will give me a moment of your time, I'll show you why.\n\nI'm currently an aspiring blockchain developer who wants to make defi products.\nI…",
  "localize": [
    {
      "locale": "ja",
      "the_new_excerpt": "他に何も読まなくても、whackdが詐欺コインであることだけは知っておいてください。だから、神の愛のために\n買ったり、売ったり、価値があると思わせるような理由をつけてはいけません。もし\nその理由をお教えします。\n\n私は現在、デフィの製品を作りたいと思っているブロックチェーン開発者の卵です。\nI...",
      "title": "Whackdは悪質なスキャムコインであり、私はそれを証明することができます。"
    },
    {
      "locale": "zh",
      "the_new_excerpt": "如果你不看别的，只知道whackd是一个骗人的硬币。所以，看在上帝的份上\n上帝，不要买它，卖它，或给它任何理由，让它有任何价值。如果\n你可以给我一点时间，我将告诉你为什么。\n\n我目前是一个有抱负的区块链开发者，想做defi产品。\nI...",
      "title": "Whackd是一个恶意的诈骗币，我可以证明这一点。"
    },
    {
      "locale": "zh-Hant",
      "the_new_excerpt": "如果你不看別的，只知道whackd是一個騙人的硬幣。所以，看在上帝的份上\n上帝，不要買它，賣它，或給它任何理由，讓它有任何價值。如果\n你可以給我一點時間，我將告訴你爲什麼。\n\n我目前是一個有抱負的區塊鏈開發者，想做defi產品。\nI...",
      "title": "Whackd是一個惡意的詐騙幣，我可以證明這一點。"
    }
  ]
}